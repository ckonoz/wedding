{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"meteor/mongo","imported":["Mongo"],"specifiers":[{"kind":"named","imported":"Mongo","local":"Mongo"}]},{"source":"meteor/check","imported":["check"],"specifiers":[{"kind":"named","imported":"check","local":"check"}]}],"exports":{"exported":["Guests"],"specifiers":[{"kind":"local","local":"Guests","exported":"Guests"}]}}},"options":{"filename":"/imports/api/guests.js","filenameRelative":"/imports/api/guests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/api/guests.js.map","sourceFileName":"/imports/api/guests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"guests"},"ignored":false,"code":"module.export({Guests:function(){return Guests}});var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});var check;module.import('meteor/check',{\"check\":function(v){check=v}});\n\n\n\nvar Guests = new Mongo.Collection('guests');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish guests that are public or belong to the current user\n  Meteor.publish('guests', function () {\n    function guestsPublication() {\n      return Guests.find({\n        $or: [{ 'private': { $ne: true } }, { owner: this.userId }]\n      });\n    }\n\n    return guestsPublication;\n  }());\n}\n\nMeteor.methods({\n  'guests.insert': function () {\n    function guestsInsert(text) {\n      check(text, String);\n\n      // Make sure the user is logged in before inserting a guest\n      if (!this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Guests.insert({\n        text: text,\n        createdAt: new Date(),\n        owner: this.userId,\n        username: Meteor.users.findOne(this.userId).username\n      });\n    }\n\n    return guestsInsert;\n  }(),\n  'guests.remove': function () {\n    function guestsRemove(guestId) {\n      check(guestId, String);\n\n      var guest = Guests.findOne(guestId);\n      if (guest['private'] && guest.owner !== this.userId) {\n        // If the guest is private, make sure only the owner can delete it\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Guests.remove(guestId);\n    }\n\n    return guestsRemove;\n  }(),\n  'guests.setChecked': function () {\n    function guestsSetChecked(guestId, setChecked) {\n      check(guestId, String);\n      check(setChecked, Boolean);\n\n      var guest = Guests.findOne(guestId);\n      if (guest['private'] && guest.owner !== this.userId) {\n        // If the guest is private, make sure only the owner can check it off\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Guests.update(guestId, { $set: { checked: setChecked } });\n    }\n\n    return guestsSetChecked;\n  }(),\n  'guests.setPrivate': function () {\n    function guestsSetPrivate(guestId, setToPrivate) {\n      check(guestId, String);\n      check(setToPrivate, Boolean);\n\n      var guest = Guests.findOne(guestId);\n\n      // Make sure only the guest owner can make a guest private\n      if (guest.owner !== this.userId) {\n        throw new Meteor.Error('not-authorized');\n      }\n\n      Guests.update(guestId, { $set: { 'private': setToPrivate } });\n    }\n\n    return guestsSetPrivate;\n  }()\n});","ast":null,"map":{"version":3,"sources":["/imports/api/guests.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,SAAS,KAAT,QAAsB,cAAtB;AACA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,SAAS,IAAI,MAAM,UAAV,CAAqB,QAArB,CAAf;;AAEP,IAAI,OAAO,QAAX,EAAqB;;;AAGnB,SAAO,OAAP,CAAe,QAAf;AAAyB,aAAS,iBAAT,GAA6B;AACpD,aAAO,OAAO,IAAP,CAAY;AACjB,aAAK,CACH,EAAE,WAAS,EAAE,KAAK,IAAP,EAAX,EADG,EAEH,EAAE,OAAO,KAAK,MAAd,EAFG;AADY,OAAZ,CAAP;AAMD;;AAPD,WAAkC,iBAAlC;AAAA;AAQD;;AAED,OAAO,OAAP,CAAe;AACb,iBADa;AAAA,0BACG,IADH,EACS;AACpB,YAAM,IAAN,EAAY,MAAZ;;;AAGA,UAAI,CAAE,KAAK,MAAX,EAAmB;AACjB,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,aAAO,MAAP,CAAc;AACZ,kBADY;AAEZ,mBAAW,IAAI,IAAJ,EAFC;AAGZ,eAAO,KAAK,MAHA;AAIZ,kBAAU,OAAO,KAAP,CAAa,OAAb,CAAqB,KAAK,MAA1B,EAAkC;AAJhC,OAAd;AAMD;;AAfY;AAAA;AAgBb,iBAhBa;AAAA,0BAgBG,OAhBH,EAgBY;AACvB,YAAM,OAAN,EAAe,MAAf;;AAEA,UAAM,QAAQ,OAAO,OAAP,CAAe,OAAf,CAAd;AACA,UAAI,oBAAiB,MAAM,KAAN,KAAgB,KAAK,MAA1C,EAAkD;;AAEhD,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,aAAO,MAAP,CAAc,OAAd;AACD;;AA1BY;AAAA;AA2Bb,qBA3Ba;AAAA,8BA2BO,OA3BP,EA2BgB,UA3BhB,EA2B4B;AACvC,YAAM,OAAN,EAAe,MAAf;AACA,YAAM,UAAN,EAAkB,OAAlB;;AAEA,UAAM,QAAQ,OAAO,OAAP,CAAe,OAAf,CAAd;AACA,UAAI,oBAAiB,MAAM,KAAN,KAAgB,KAAK,MAA1C,EAAkD;;AAEhD,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,aAAO,MAAP,CAAc,OAAd,EAAuB,EAAE,MAAM,EAAE,SAAS,UAAX,EAAR,EAAvB;AACD;;AAtCY;AAAA;AAuCb,qBAvCa;AAAA,8BAuCO,OAvCP,EAuCgB,YAvChB,EAuC8B;AACzC,YAAM,OAAN,EAAe,MAAf;AACA,YAAM,YAAN,EAAoB,OAApB;;AAEA,UAAM,QAAQ,OAAO,OAAP,CAAe,OAAf,CAAd;;;AAGA,UAAI,MAAM,KAAN,KAAgB,KAAK,MAAzB,EAAiC;AAC/B,cAAM,IAAI,OAAO,KAAX,CAAiB,gBAAjB,CAAN;AACD;;AAED,aAAO,MAAP,CAAc,OAAd,EAAuB,EAAE,MAAM,EAAE,WAAS,YAAX,EAAR,EAAvB;AACD;;AAnDY;AAAA;AAAA,CAAf","file":"/imports/api/guests.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n\nexport const Guests = new Mongo.Collection('guests');\n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish guests that are public or belong to the current user\n  Meteor.publish('guests', function guestsPublication() {\n    return Guests.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n\nMeteor.methods({\n  'guests.insert'(text) {\n    check(text, String);\n\n    // Make sure the user is logged in before inserting a guest\n    if (! this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Guests.insert({\n      text,\n      createdAt: new Date(),\n      owner: this.userId,\n      username: Meteor.users.findOne(this.userId).username,\n    });\n  },\n  'guests.remove'(guestId) {\n    check(guestId, String);\n\n    const guest = Guests.findOne(guestId);\n    if (guest.private && guest.owner !== this.userId) {\n      // If the guest is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Guests.remove(guestId);\n  },\n  'guests.setChecked'(guestId, setChecked) {\n    check(guestId, String);\n    check(setChecked, Boolean);\n\n    const guest = Guests.findOne(guestId);\n    if (guest.private && guest.owner !== this.userId) {\n      // If the guest is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Guests.update(guestId, { $set: { checked: setChecked } });\n  },\n  'guests.setPrivate'(guestId, setToPrivate) {\n    check(guestId, String);\n    check(setToPrivate, Boolean);\n\n    const guest = Guests.findOne(guestId);\n\n    // Make sure only the guest owner can make a guest private\n    if (guest.owner !== this.userId) {\n      throw new Meteor.Error('not-authorized');\n    }\n\n    Guests.update(guestId, { $set: { private: setToPrivate } });\n  },\n});\n"]},"hash":"23909dd62c4e78d4127fa029a11921cfe2961565"}
